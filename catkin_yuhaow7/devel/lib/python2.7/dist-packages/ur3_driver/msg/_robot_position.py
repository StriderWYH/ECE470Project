# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ur3_driver/robot_position.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class robot_position(genpy.Message):
  _md5sum = "8eb0a358142a84437f7ab31c0470ba46"
  _type = "ur3_driver/robot_position"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64[] position_new_1
bool isReady_new_1
float64[] position_new_2
bool isReady_new_2"""
  __slots__ = ['position_new_1','isReady_new_1','position_new_2','isReady_new_2']
  _slot_types = ['float64[]','bool','float64[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position_new_1,isReady_new_1,position_new_2,isReady_new_2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot_position, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position_new_1 is None:
        self.position_new_1 = []
      if self.isReady_new_1 is None:
        self.isReady_new_1 = False
      if self.position_new_2 is None:
        self.position_new_2 = []
      if self.isReady_new_2 is None:
        self.isReady_new_2 = False
    else:
      self.position_new_1 = []
      self.isReady_new_1 = False
      self.position_new_2 = []
      self.isReady_new_2 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.position_new_1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_new_1))
      buff.write(_get_struct_B().pack(self.isReady_new_1))
      length = len(self.position_new_2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_new_2))
      buff.write(_get_struct_B().pack(self.isReady_new_2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_new_1 = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.isReady_new_1,) = _get_struct_B().unpack(str[start:end])
      self.isReady_new_1 = bool(self.isReady_new_1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_new_2 = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.isReady_new_2,) = _get_struct_B().unpack(str[start:end])
      self.isReady_new_2 = bool(self.isReady_new_2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.position_new_1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_new_1.tostring())
      buff.write(_get_struct_B().pack(self.isReady_new_1))
      length = len(self.position_new_2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_new_2.tostring())
      buff.write(_get_struct_B().pack(self.isReady_new_2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_new_1 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 1
      (self.isReady_new_1,) = _get_struct_B().unpack(str[start:end])
      self.isReady_new_1 = bool(self.isReady_new_1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_new_2 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 1
      (self.isReady_new_2,) = _get_struct_B().unpack(str[start:end])
      self.isReady_new_2 = bool(self.isReady_new_2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
